---

local:
  ip: "${(NetworkInterface.getNetworkInterfaces().toList().collectMany{ it.getInetAddresses().findAll{it instanceof Inet4Address} }.find{ !(it.getHostAddress() =~ '127[.]0[.]0[.]1|192[.]168[.].*') } ?: InetAddress.getLocalHost()).getHostAddress() }"


#role:
  # public hostname of this server. 
  # for example it could be official address of the nginx server that balancing requests to this server and its clones 
#  host: ${env['HOST_'+ env.ROLE]}
  # public ports (http, https, ...) of the server
#  port: ${ env.findAll{it.key.startsWith('PORT_'+env.ROLE+'_')}.collectEntries{[it.key.substring(env.ROLE.length()+6).toLowerCase(),it.value]} }

## the list of server roles defined with env variables HOST_ and PORT_
# as result we have:
# roles:
#   ids:
#     host: xxx
#     port:
#       https: yyy
roles: |-
  ${
    env.findAll{it.key =~ /[^_]+_(HOST|PORT_.+)$/}.inject([:]){ m, e ->
        def assocIn={path, v->
            path.dropRight(1).inject(m){p,k->p.get(k,[:])}.put(path.last(), v) 
        }
        assocIn(e.key.toLowerCase().split("_"), e.value)
        return m
    } 
  }

## the parameters of current server known for external users / browsers / servers
# as result we have (example for bps):
# bps:
#   host: xxx
#   port:
#     https: yyy
role: ${ roles[env.ROLE.toLowerCase()] }

# common jvm properties
jvm:
  xms: 512m
  xmx: 2048m
  max_perm_size: 256m

# 
log4j:
  DEBUG: "${env.DEBUG ?: 'false'}"

# Ports offset. This entry will set the value of the ports defined below to the define value + Offset.
# e.g. Offset=2 and HTTPS port=9443 will set the effective HTTPS port to 9445
carbon:
  offset: 0
  HideAdminServiceWSDLs: true

# conf/identity.xml
identity:
  session_datasource: WSO2_CARBON_DB
  SessionIdleTimeout: 15
  RememberMeTimeout: 20160
  EnableThriftService: false
